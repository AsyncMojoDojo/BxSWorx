using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
//.........................................................
using BxS_WorxExcel.UI.Menu;
using BxS_WorxExcel.UI.Task;

using BxS_WorxIPX.Main;
using BxS_WorxIPX.NCO;

using BxSWorxFormTesting.Properties;
//•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
namespace BxS_WorxExcel.UI.Forms
{
	public partial class BxS_Main : Form
		{

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				public BxS_Main()
					{
						InitializeComponent();
						//...
						this.SetupStartup()			;
						this.SetupMove()				;
						this.SetupSlidepanel()	;
						this.SetupButtons()			;
						this.AddButtons()				;
					}

		private void Xbtn_Menu_Click(	object sender , EventArgs e	)
			{
						//this._IPXCntlr	=		new	Lazy<IPX_Controller>	(	()=> IPX_Controller.Instance  ) ;
				//this.xbtn_Menu.Enabled	= false;
				this.ActivateSlidePanel();
			}


		//private	BindingList<IDTO_Session>		BDCList		{ get; set; }
		//private Lazy<UC_DGVView>	_DGV;

		private void Button1_Click(object sender , EventArgs e)
			{
				IDTO_SessionRequest x = this._IPXCntlr.Value.NCOx_Controller.NewSAPSessionRequest();
				this._DGVP.Value.LoadData(x);
					//{	this.xpnl_UC.Controls.Remove( this._DGVP.Value.View.ViewUC );	}
					{	this.xspl_UC.Panel2Collapsed	= true;
						this.xspl_UC.Panel1.Controls.Add( this._DGVP.Value.View.ViewUC );	}

				//if (this._DGV.Value.InUse)
				//	{	this.xpnl_UC.Controls.Remove( this._DGV.Value )	;	}
				//else

				//this._DGV.Value.InUse	= ! this._DGV.Value.InUse;
			}

		private readonly Lazy<IPX_Controller>	_IPXCntlr;
		private	Lazy<UC_DGVPresenter>	_DGVP;

		private void BxS_Main_Load(object sender , EventArgs e)
			{
				//IUC_DGVModel	lo_Md		= new UC_DGVModel( this._IPXCntlr.Value.NCOx_Controller	)	;
				//IUC_DGVView		lo_Vw		=	new	UC_DGVView()	;
				////...
				//this._DGVP	= new	Lazy<UC_DGVPresenter>(	()=>	new	UC_DGVPresenter( lo_Md , lo_Vw ) );


				//this._DGV		= new	Lazy<UC_DGVView>(	()=> new UC_DGVView() );

				//var x = new DTO_Session();
				//x.UserID	= "AAAA";
				//this.BDCList.Add(x);

				//this._DGV.Value.LoadData( this.BDCList );
			}



		private void button5_Click(object sender , EventArgs e)
			{
				IDTO_SessionRequest x = this._IPXCntlr.Value.NCOx_Controller.NewSAPSessionRequest();
				x.User	= "100";
				this._DGVP.Value.LoadData(x);
			}

		private void button6_Click(object sender , EventArgs e)
			{
				this.xdlg_Colour.ShowDialog();
				this._DGVP.Value.Colour	=	this.xdlg_Colour.Color;
			}


		//.

			//===========================================================================================
			#region "Declarations"

				private	const	int	BUTTONPANELWIDTH	= 48;
				//...
				private	Dictionary<string , IMItem>	_MenuItems;
				//...
				private	string	_BtnPrevID		;
				//...
				private	Color		_ColourBack		;
				private	Color		_ColourMove		;
				private	Color		_ColourSlide	;
				//...
				private	bool		_MoveActive		;
				private	Point		_MoveLocation	;
				//...
				private int			_SlideWidth		;
				private	int			_SlideIncr		;
				private int			_SlideStep		;

			#endregion

			//===========================================================================================
			#region "Routines: Exposed"

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				public void LoadTask( IMItem item )
					{
						this._MenuItems.Add( task.MenuItem.ID	,	task.MenuItem );
					}

			#endregion

			//===========================================================================================
			#region "Routines: Private: Button handling"




				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private	void SetupButtons()
					{
						// *** first button ***
						IMItem x1 =	MItem.Create();
						//...
						x1.OnEventClick		=	this.OnMenuButton_Click	;
						x1.TabIndex				=	1												;
						x1.ID							=	"Settings"							;
						x1.ImageID				=	"icons8_Settings_25px"	;
						x1.FocusIndicatorColour	= Color.FromArgb( 255 , 0 , 255 , 0 );

						IMItem y1 =	MItem.Create();
						//...
						y1.TabIndex				=	1												;
						y1.ID							=	"Settings"							;
						y1.ImageID				=	"icons8_Excel_25px"			;
						y1.OnEventClick		=	this.OnMenuButton_Click	;

						x1.AddSubMenuItem( y1 );
						//...

						// *** second button ***
						IMItem x2 =	MItem.Create();
						//...
						x2.TabIndex				=	2												;
						x2.ID							=	"Menu"									;
						x2.ImageID				=	"icons8_Excel_25px"			;
						x2.OnEventClick		=	this.OnMenuButton_Click	;
						x2.FocusIndicatorColour	= Color.FromArgb( 255 , 0 , 255 , 0 );

						IMItem y2 =	MItem.Create();
						//...
						y2.TabIndex				=	1												;
						y2.ID							=	"Menu"									;
						y2.ImageID				=	"icons8_SAP_25px"				;
						y2.OnEventClick		=	this.OnMenuButton_Click	;

						x2.AddSubMenuItem( y2 );

						// *** third button ***
						IMItem x3 =	MItem.Create();
						//...
						x3.TabIndex				=	3												;
						x3.ID							=	"Action"									;
						x3.ImageID				=	"icons8_SAP_25px"			;
						x3.OnEventClick		=	this.OnMenuButton_Click	;
						x3.FocusIndicatorColour	= Color.FromArgb( 170 , 0 , 255 , 0 );

						//...
						this._MenuItems.Add( x1.ID , x1 );
						this._MenuItems.Add( x2.ID , x2 );
						this._MenuItems.Add( x3.ID , x3 );
					}




				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private void AddButtons()
					{
						foreach ( IMItem lo_Item in this._MenuItems.Values.OrderByDescending( x => x.TabIndex ))
							{
								this.xpnl_Menu.Controls.Add( lo_Item.Button );
							}
					}






				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private void OnMenuButton_Click( object sender , EventArgs e	)
					{
						var			lo_Btn	= (Button) sender;
						string	lc_Tag	= lo_Btn.Tag.ToString();
						//...
						lo_Btn.Enabled	= false;
						//...
						if ( lc_Tag.Equals( this._BtnPrevID ) )
							{

							}
						else
							{
								// shut slide panel first and remove previous buttons, clear select indicator
								//
								if ( ! this.xpnl_SlidePanel.Width.Equals(0) )
									{
										this.ActivateSlidePanel();
									}
								this.xpnl_SlidePanel.Controls.Clear();
								if ( this._MenuItems.TryGetValue( this._BtnPrevID , out IMItem lo_BtnX ) )
									{
										lo_BtnX.SetFocusState( false );
									}
								// Add slide panel buttons
								//
								if ( this._MenuItems.TryGetValue( lc_Tag , out IMItem lo_Itm ) )
									{
										if ( lo_Itm.SubMenuCount.Equals(0) )
											{
												this.ActivateSlidePanel(true);
											}
										else
											{
												foreach ( IMItem lo_SBtn in lo_Itm.GetSubMenuList() )
													{
														this.xpnl_SlidePanel.Controls.Add( lo_SBtn.Button );
													}
											}
										//...
										lo_Itm.SetFocusState( true );
										this._BtnPrevID	= lc_Tag;
									}
							}
						//...
						this.ActivateSlidePanel();
						lo_Btn.Enabled	= true;
					}

			#endregion












			//===========================================================================================
			#region "Routines: Private: General"

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private void SetupStartup()
					{
						this._MenuItems		= new	Dictionary<string, IMItem>();
						this._BtnPrevID		= string.Empty;
						//...
						this._ColourBack	= Color.FromArgb( 255	, 31 , 31 , 31 );
						this._ColourSlide	= Color.FromArgb( 150	, 24 , 24 , 24 );
						//...
						this.xpnl_Menu.Width	= BUTTONPANELWIDTH;
					}

			#endregion

			//===========================================================================================
			#region "Routines: Private: Button Handling"

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private UC_MenuButton	CreateButton( IMItem	item )
					{
						return	new	UC_MenuButton
									{
										// Fixed settings
											Dock	=	DockStyle.Top

										// User Settings
										,	TabIndex							=	item.TabIndex
										,	Name									=	item.ID
										, SetFocusColour				= item.FocusIndicatorColour
										,	SetImage							=	(Image)	Resources.ResourceManager.GetObject( item.ImageID )
										,	SetClickEventHandler	=	new System.EventHandler( item.OnEventClick )

										, ButtonTag	= item.ID
									};
					}

			#endregion

			//===========================================================================================
			#region "Routines: Private: Slide panel"

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private void SetupSlidepanel()
					{
						this._SlideWidth								= BUTTONPANELWIDTH;
						this._SlideStep									= 03	;
						//...
						this.xpnl_SlidePanel.Width			=	00	;
						this.xpnl_SlidePanel.BackColor	= this._ColourSlide;
					}

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private void ActivateSlidePanel( bool	slow	= false )
					{
						this._SlideIncr		=	slow	?	1	: this._SlideStep	;
						if ( !this.xpnl_SlidePanel.Width.Equals(0) )	this._SlideIncr	*= -1;
						//...
						do
							{
								this.xpnl_SlidePanel.Width	+= this._SlideIncr;

							} while (			this.xpnl_SlidePanel.Width	< this._SlideWidth
												&&	this.xpnl_SlidePanel.Width	> 0									);
					}

			#endregion

			//===========================================================================================
			#region "Routines: Private: Window state"

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private void OnFormClose_Click( object sender , EventArgs e )
					{
						this.Close();
					}

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private void OnFormMinimise_Click( object sender , EventArgs e )
					{
						this.WindowState	= FormWindowState.Minimized;
					}

			#endregion
 
			//===========================================================================================
			#region "Routines: Private: Window move"

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private void SetupMove()
					{
						this._ColourMove	=	Color.FromArgb( 150 , 42 , 42 , 42 )	;
					}

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private void OnWindowHeader_MouseDown( object sender , MouseEventArgs e )
					{
						this._MoveActive		              = ! this._MoveActive	;
						this._MoveLocation	              = e.Location					;
						this.xpnl_WindowHeader.BackColor	=	this._ColourMove		;
					}

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private void OnWindowHeader_MouseUp( object sender , MouseEventArgs e )
					{
						this._MoveActive									= ! this._MoveActive	;
						this.xpnl_WindowHeader.BackColor	=		this._ColourBack	;
					}

				//¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
				private void OnWindowHeader_MouseMove( object sender , MouseEventArgs e )
					{
						if ( this._MoveActive )
							{
								this.Location		= new	Point(	( this.Location.X	- this._MoveLocation.X ) + e.X
																						,	(	this.Location.Y	- this._MoveLocation.Y ) + e.Y );
								this.Update();
							}
					}

			#endregion

		}
}
